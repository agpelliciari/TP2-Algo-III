@startuml

skinparam monochrome true
hide circle
skinparam classAttributeIconSize 0

title: Model of classes that interact with App

class Game {
- exclusivityCount: int
- aNullifierIsActivated: boolean
- playersScoreWithoutExclusivity: int[]
- selectedQuestionIndexes: ArrayList<Integer>
- questionCount: int
+ Game(players: ArrayList<Player>, questions: ArrayList<Question>)
+ addPlayer(player: Player)
+ addQuestion(questions: ArrayList<Question>)
+ selectPlayers(numberOfPlayers: int, playerNames: ArrayList<String> playersNames): ArrayList<Player>
+ registerUser(players: ArrayList<Player>, aPlayer: Player)
+ checkIfOnlyOneCorrectAnswer(playersCorrectAnswers: int[]): boolean
+ checkIfAllAreCorrectAnswers(playersCorrectAnswers: int[]): boolean
+ assignScoreWithExclusivity(chosenChoices: ArrayList<String[]>, chosenExclusivities: ArrayList<boolean[]>)
+ checkIfThereIsAScoreNullifierActivated()
+ registerUsers(playersNames: ArrayList<String>)
+ boolean checkIfRepeatedTheme(int index)
+ Question getQuestion(int questionIndex)
+ registerUsedExclusivity(isSelected: boolean)
+ updatePlayersScoreWithoutExclusivity()
+ updatePlayersScoreWithExclusivity()
+ isFinished(): boolean
+ deactivatePowers()
+ resetExclusivityCount()
+ powerWereUsed(): boolean
+ assignExclusivity(playerIndex: int, exclusivitySelected: boolean)
}

class Limit {
- pointsLimit: int
- questionLimit: int
+ questionLimitReached(questionCount: int): boolean
+ pointsLimitReached(maxScore: int): boolean
}

abstract class Question{
-choices: List<Choice>
-content: Content
-mode: Mode
-id: int
+{static}Question(content: Content, mode: Mode, choices: List<Choice>)
+hasNoIncorrectAnswers(choices: ArrayList<Choice>): boolean
+assignScore(playersAnswers: HashMap<Player, ArrayList<Choice>>): void
+assignChosenChoicesToPlayer(assignChosenChoicesToPlayer: String): ArrayList<Choice>
+createAnswers(chosenChoice: String): ArrayList<Choice>
}

class Player{
-score: Score
-multipliers: ArrayList<Multiplier>
-exclusivity: Exclusivity
-nullifier: Nullifier
+{static}Player(name: String, initialScore: int)
+setAnswers(question: Question, chosenOptions: String): ArrayList<Choice>
+assignScore(correction: Correction, newScore: int)
+equals(aPlayer: Player): boolean
}

class JsonParser{
+questionsParser(fileName: String): ArrayList<Question>
}

class QuestionFactoryProvider{
+{static}getFactory(type: String): QuestionFactory
}

class QuestionFactory{
+{static}createQuestion(questionString: QuestionString, choices: ArrayList<Choice>): Question
}

Game --> Question:1..*
Game --> Player:2..*
Game --> JsonParser:1
Game -> Limit:1

JsonParser ..> QuestionFactoryProvider: <<uses>>
QuestionFactory .> Question: "<<creates>>"

QuestionFactoryProvider ..> QuestionFactory: "<<creates>>"

Question <<Abstract>>
QuestionFactory <<Interface>>

@enduml