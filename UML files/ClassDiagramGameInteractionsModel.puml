@startuml

skinparam monochrome true
hide circle
skinparam classAttributeIconSize 0

title: Model of classes that interact with Game

class Game{
-maxScore: int
+{static}Game(questions: ArrayList<Question>, maxScore: int, panel: Panel)
+start(numberOfPlayers: int)
+selectPlayers(numberOfPlayers: int): ArrayList<Player>
+registerUser(players: ArrayList<Player>, aPlayer: Player)
}

class Panel{
+show(aQuestion: Question)
}

abstract class Question{
-choices: List<Choice>
-content: Content
-mode: Mode
-id: int
+{static}Question(content: Content, mode: Mode, choices: List<Choice>)
+getNumberOfCorrectAnswers(List<Choice> choices): int
+getNumberOfIncorrectAnswers(List<Choice> choices): int
+hasNoIncorrectAnswers(ArrayList<Choice> choices): boolean
+assignScore(playersAnswers: HashMap<Player, ArrayList<Choice>>)
+assignChosenChoicesToPlayer(assignChosenChoicesToPlayer: String): ArrayList<Choice>
}

class Player{
-name: String
-score: Score
-powers: List<Power>
+{static}Player(name: String, initialScore: int)
+setAnswers(question: Question, chosenOptions: String): ArrayList<Choice>
+assignScore(correction: Correction, newScore: int)
+equals(aPlayer: Player): boolean
}

class JsonParser{
+questionsParser(fileName: String): ArrayList<Question>
}

class QuestionFactory{
+createTrueFalse(id: int, theme: String, prompt: String, type: String, choices: ArrayList<Choice>, answerText: String)
+createMultipleChoice(id: int, theme: String, prompt: String, type: String, choices: ArrayList<Choice>, answerText: String)
+createGroupChoice(id: int, theme: String, prompt: String, type: String, choices: ArrayList<Choice>, answerText: String)
+createOrderedChoice(id: int, theme: String, prompt: String, type: String, choices: ArrayList<Choice>, answerText: String, correctOrder: List<int>)

}

Game *- Panel:1
Game --> Question:1..*
Game --> Player:2..*
Game --> JsonParser:1

JsonParser --> QuestionFactory
QuestionFactory .> Question: "<<creates>>"

Question <<Abstract>>

@enduml