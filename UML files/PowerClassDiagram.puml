@startuml
class Player{
    - List<Power> powers
    + assignateMultiplicator(factor: int)
}

abstract class Power{

}

class Exclusivity{
    - PowerState state

}

class Nullifier{
    - PowerState state
}

class Multiplicator{
    - PowerState state
    - factor: int
    +Multiplicator(int factor)
    +int getFactor(): int
    +setState(PowerState state)
    +apply(Player player)
    +isActive(): boolean

}

interface PowerState {
  + activate(Power power)
   + deactivate(Power power)
   + use(Power power)
}


class ActiveState {

    + activate(Power power)
    + deactivate(Power power)
    +boolean isActive()
}

class InactiveState {

    + activate(Power power)
    + deactivate(Power power)
    +boolean isActive()
}

class UsedState {

    + activate(Power power)
    + deactivate(Power power)
    +boolean isActive()
}




Power --> PowerState : uses
PowerState <|.. ActiveState
PowerState <|.. InactiveState
PowerState <|.. UsedState

Player --> Power : has
Power -->"2" Multiplicator
Power -->"2" Exclusivity
Power -->"1" Nullifier

@enduml